// Generated from Rows.g4 by ANTLR 4.2.2
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class RowsLexer extends Lexer {
	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		XOBJ=1, NOBJ=2, DIVIDE=3, MULTIPLY=4, MINUS=5, PLUS=6, GT=7, LT=8, EQ=9, 
		EXPR=10, FLOATATOM=11, OSC=12, PHASOR=13, DAC=14, METRO=15, MOD=16, FCOUNTER=17, 
		SIG=18, CLIP=19, BP=20, HIP=21, LOP=22, VCF=23, OBJ=24, CANVAS=25, CONNECT=26, 
		MSG=27, POW=28, LINE=29, UNPACK=30, COS=31, NOISE=32, INT=33, FLOAT=34, 
		DIGIT=35, TRIGGER=36, BANG=37, VAR=38, STRING=39, SEMICOLON=40, LPAREN=41, 
		RPAREN=42, TAB=43, NL=44;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"<INVALID>",
		"'#X'", "'#N'", "DIVIDE", "MULTIPLY", "MINUS", "PLUS", "'>'", "'<'", "'=='", 
		"'expr'", "'floatatom'", "'osc~'", "'phasor~'", "'dac~'", "'metro'", "'mod'", 
		"'fcounter'", "'sig~'", "'clip~'", "'bp~'", "'hip~'", "'lop~'", "'vcf~'", 
		"'obj'", "'canvas'", "'connect'", "'msg'", "'pow'", "'line~'", "'unpack'", 
		"'cos~'", "'noise~'", "INT", "FLOAT", "DIGIT", "'trigger'", "'bng'", "VAR", 
		"STRING", "';'", "'('", "')'", "TAB", "NL"
	};
	public static final String[] ruleNames = {
		"XOBJ", "NOBJ", "DIVIDE", "MULTIPLY", "MINUS", "PLUS", "GT", "LT", "EQ", 
		"EXPR", "FLOATATOM", "OSC", "PHASOR", "DAC", "METRO", "MOD", "FCOUNTER", 
		"SIG", "CLIP", "BP", "HIP", "LOP", "VCF", "OBJ", "CANVAS", "CONNECT", 
		"MSG", "POW", "LINE", "UNPACK", "COS", "NOISE", "INT", "FLOAT", "DIGIT", 
		"TRIGGER", "BANG", "VAR", "STRING", "SEMICOLON", "LPAREN", "RPAREN", "TAB", 
		"NL"
	};


	public RowsLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "Rows.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2.\u013b\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\3\2\3\2\3\2\3\3\3\3\3\3\3\4\3\4\3\4\5\4e\n\4\3\5\3\5\3\5\5"+
		"\5j\n\5\3\6\3\6\3\6\5\6o\n\6\3\7\3\7\3\7\5\7t\n\7\3\b\3\b\3\t\3\t\3\n"+
		"\3\n\3\n\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f"+
		"\3\f\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\17"+
		"\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\21"+
		"\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\23\3\23\3\23\3\23\3\23"+
		"\3\24\3\24\3\24\3\24\3\24\3\24\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26"+
		"\3\26\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\31\3\31\3\31"+
		"\3\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\33"+
		"\3\33\3\33\3\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36"+
		"\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3 \3!\3!\3!"+
		"\3!\3!\3!\3!\3\"\6\"\u0104\n\"\r\"\16\"\u0105\3#\6#\u0109\n#\r#\16#\u010a"+
		"\3#\3#\7#\u010f\n#\f#\16#\u0112\13#\3$\3$\3%\3%\3%\3%\3%\3%\3%\3%\3&\3"+
		"&\3&\3&\3\'\3\'\3\'\3(\6(\u0126\n(\r(\16(\u0127\3)\3)\3*\3*\3+\3+\3,\6"+
		",\u0131\n,\r,\16,\u0132\3,\3,\3-\5-\u0138\n-\3-\3-\2\2.\3\3\5\4\7\5\t"+
		"\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23"+
		"%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G"+
		"%I&K\'M(O)Q*S+U,W-Y.\3\2\5\3\2\62;\4\2\62;C|\4\2\13\13\"\"\u0144\2\3\3"+
		"\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2"+
		"\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3"+
		"\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2"+
		"%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61"+
		"\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2"+
		"\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I"+
		"\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2"+
		"\2\2\2W\3\2\2\2\2Y\3\2\2\2\3[\3\2\2\2\5^\3\2\2\2\7d\3\2\2\2\ti\3\2\2\2"+
		"\13n\3\2\2\2\rs\3\2\2\2\17u\3\2\2\2\21w\3\2\2\2\23y\3\2\2\2\25|\3\2\2"+
		"\2\27\u0081\3\2\2\2\31\u008b\3\2\2\2\33\u0090\3\2\2\2\35\u0098\3\2\2\2"+
		"\37\u009d\3\2\2\2!\u00a3\3\2\2\2#\u00a7\3\2\2\2%\u00b0\3\2\2\2\'\u00b5"+
		"\3\2\2\2)\u00bb\3\2\2\2+\u00bf\3\2\2\2-\u00c4\3\2\2\2/\u00c9\3\2\2\2\61"+
		"\u00ce\3\2\2\2\63\u00d2\3\2\2\2\65\u00d9\3\2\2\2\67\u00e1\3\2\2\29\u00e5"+
		"\3\2\2\2;\u00e9\3\2\2\2=\u00ef\3\2\2\2?\u00f6\3\2\2\2A\u00fb\3\2\2\2C"+
		"\u0103\3\2\2\2E\u0108\3\2\2\2G\u0113\3\2\2\2I\u0115\3\2\2\2K\u011d\3\2"+
		"\2\2M\u0121\3\2\2\2O\u0125\3\2\2\2Q\u0129\3\2\2\2S\u012b\3\2\2\2U\u012d"+
		"\3\2\2\2W\u0130\3\2\2\2Y\u0137\3\2\2\2[\\\7%\2\2\\]\7Z\2\2]\4\3\2\2\2"+
		"^_\7%\2\2_`\7P\2\2`\6\3\2\2\2ae\7\61\2\2bc\7\61\2\2ce\7\u0080\2\2da\3"+
		"\2\2\2db\3\2\2\2e\b\3\2\2\2fj\7,\2\2gh\7,\2\2hj\7\u0080\2\2if\3\2\2\2"+
		"ig\3\2\2\2j\n\3\2\2\2ko\7/\2\2lm\7/\2\2mo\7\u0080\2\2nk\3\2\2\2nl\3\2"+
		"\2\2o\f\3\2\2\2pt\7-\2\2qr\7-\2\2rt\7\u0080\2\2sp\3\2\2\2sq\3\2\2\2t\16"+
		"\3\2\2\2uv\7@\2\2v\20\3\2\2\2wx\7>\2\2x\22\3\2\2\2yz\7?\2\2z{\7?\2\2{"+
		"\24\3\2\2\2|}\7g\2\2}~\7z\2\2~\177\7r\2\2\177\u0080\7t\2\2\u0080\26\3"+
		"\2\2\2\u0081\u0082\7h\2\2\u0082\u0083\7n\2\2\u0083\u0084\7q\2\2\u0084"+
		"\u0085\7c\2\2\u0085\u0086\7v\2\2\u0086\u0087\7c\2\2\u0087\u0088\7v\2\2"+
		"\u0088\u0089\7q\2\2\u0089\u008a\7o\2\2\u008a\30\3\2\2\2\u008b\u008c\7"+
		"q\2\2\u008c\u008d\7u\2\2\u008d\u008e\7e\2\2\u008e\u008f\7\u0080\2\2\u008f"+
		"\32\3\2\2\2\u0090\u0091\7r\2\2\u0091\u0092\7j\2\2\u0092\u0093\7c\2\2\u0093"+
		"\u0094\7u\2\2\u0094\u0095\7q\2\2\u0095\u0096\7t\2\2\u0096\u0097\7\u0080"+
		"\2\2\u0097\34\3\2\2\2\u0098\u0099\7f\2\2\u0099\u009a\7c\2\2\u009a\u009b"+
		"\7e\2\2\u009b\u009c\7\u0080\2\2\u009c\36\3\2\2\2\u009d\u009e\7o\2\2\u009e"+
		"\u009f\7g\2\2\u009f\u00a0\7v\2\2\u00a0\u00a1\7t\2\2\u00a1\u00a2\7q\2\2"+
		"\u00a2 \3\2\2\2\u00a3\u00a4\7o\2\2\u00a4\u00a5\7q\2\2\u00a5\u00a6\7f\2"+
		"\2\u00a6\"\3\2\2\2\u00a7\u00a8\7h\2\2\u00a8\u00a9\7e\2\2\u00a9\u00aa\7"+
		"q\2\2\u00aa\u00ab\7w\2\2\u00ab\u00ac\7p\2\2\u00ac\u00ad\7v\2\2\u00ad\u00ae"+
		"\7g\2\2\u00ae\u00af\7t\2\2\u00af$\3\2\2\2\u00b0\u00b1\7u\2\2\u00b1\u00b2"+
		"\7k\2\2\u00b2\u00b3\7i\2\2\u00b3\u00b4\7\u0080\2\2\u00b4&\3\2\2\2\u00b5"+
		"\u00b6\7e\2\2\u00b6\u00b7\7n\2\2\u00b7\u00b8\7k\2\2\u00b8\u00b9\7r\2\2"+
		"\u00b9\u00ba\7\u0080\2\2\u00ba(\3\2\2\2\u00bb\u00bc\7d\2\2\u00bc\u00bd"+
		"\7r\2\2\u00bd\u00be\7\u0080\2\2\u00be*\3\2\2\2\u00bf\u00c0\7j\2\2\u00c0"+
		"\u00c1\7k\2\2\u00c1\u00c2\7r\2\2\u00c2\u00c3\7\u0080\2\2\u00c3,\3\2\2"+
		"\2\u00c4\u00c5\7n\2\2\u00c5\u00c6\7q\2\2\u00c6\u00c7\7r\2\2\u00c7\u00c8"+
		"\7\u0080\2\2\u00c8.\3\2\2\2\u00c9\u00ca\7x\2\2\u00ca\u00cb\7e\2\2\u00cb"+
		"\u00cc\7h\2\2\u00cc\u00cd\7\u0080\2\2\u00cd\60\3\2\2\2\u00ce\u00cf\7q"+
		"\2\2\u00cf\u00d0\7d\2\2\u00d0\u00d1\7l\2\2\u00d1\62\3\2\2\2\u00d2\u00d3"+
		"\7e\2\2\u00d3\u00d4\7c\2\2\u00d4\u00d5\7p\2\2\u00d5\u00d6\7x\2\2\u00d6"+
		"\u00d7\7c\2\2\u00d7\u00d8\7u\2\2\u00d8\64\3\2\2\2\u00d9\u00da\7e\2\2\u00da"+
		"\u00db\7q\2\2\u00db\u00dc\7p\2\2\u00dc\u00dd\7p\2\2\u00dd\u00de\7g\2\2"+
		"\u00de\u00df\7e\2\2\u00df\u00e0\7v\2\2\u00e0\66\3\2\2\2\u00e1\u00e2\7"+
		"o\2\2\u00e2\u00e3\7u\2\2\u00e3\u00e4\7i\2\2\u00e48\3\2\2\2\u00e5\u00e6"+
		"\7r\2\2\u00e6\u00e7\7q\2\2\u00e7\u00e8\7y\2\2\u00e8:\3\2\2\2\u00e9\u00ea"+
		"\7n\2\2\u00ea\u00eb\7k\2\2\u00eb\u00ec\7p\2\2\u00ec\u00ed\7g\2\2\u00ed"+
		"\u00ee\7\u0080\2\2\u00ee<\3\2\2\2\u00ef\u00f0\7w\2\2\u00f0\u00f1\7p\2"+
		"\2\u00f1\u00f2\7r\2\2\u00f2\u00f3\7c\2\2\u00f3\u00f4\7e\2\2\u00f4\u00f5"+
		"\7m\2\2\u00f5>\3\2\2\2\u00f6\u00f7\7e\2\2\u00f7\u00f8\7q\2\2\u00f8\u00f9"+
		"\7u\2\2\u00f9\u00fa\7\u0080\2\2\u00fa@\3\2\2\2\u00fb\u00fc\7p\2\2\u00fc"+
		"\u00fd\7q\2\2\u00fd\u00fe\7k\2\2\u00fe\u00ff\7u\2\2\u00ff\u0100\7g\2\2"+
		"\u0100\u0101\7\u0080\2\2\u0101B\3\2\2\2\u0102\u0104\5G$\2\u0103\u0102"+
		"\3\2\2\2\u0104\u0105\3\2\2\2\u0105\u0103\3\2\2\2\u0105\u0106\3\2\2\2\u0106"+
		"D\3\2\2\2\u0107\u0109\5G$\2\u0108\u0107\3\2\2\2\u0109\u010a\3\2\2\2\u010a"+
		"\u0108\3\2\2\2\u010a\u010b\3\2\2\2\u010b\u010c\3\2\2\2\u010c\u0110\7\60"+
		"\2\2\u010d\u010f\5G$\2\u010e\u010d\3\2\2\2\u010f\u0112\3\2\2\2\u0110\u010e"+
		"\3\2\2\2\u0110\u0111\3\2\2\2\u0111F\3\2\2\2\u0112\u0110\3\2\2\2\u0113"+
		"\u0114\t\2\2\2\u0114H\3\2\2\2\u0115\u0116\7v\2\2\u0116\u0117\7t\2\2\u0117"+
		"\u0118\7k\2\2\u0118\u0119\7i\2\2\u0119\u011a\7i\2\2\u011a\u011b\7g\2\2"+
		"\u011b\u011c\7t\2\2\u011cJ\3\2\2\2\u011d\u011e\7d\2\2\u011e\u011f\7p\2"+
		"\2\u011f\u0120\7i\2\2\u0120L\3\2\2\2\u0121\u0122\7&\2\2\u0122\u0123\5"+
		"O(\2\u0123N\3\2\2\2\u0124\u0126\t\3\2\2\u0125\u0124\3\2\2\2\u0126\u0127"+
		"\3\2\2\2\u0127\u0125\3\2\2\2\u0127\u0128\3\2\2\2\u0128P\3\2\2\2\u0129"+
		"\u012a\7=\2\2\u012aR\3\2\2\2\u012b\u012c\7*\2\2\u012cT\3\2\2\2\u012d\u012e"+
		"\7+\2\2\u012eV\3\2\2\2\u012f\u0131\t\4\2\2\u0130\u012f\3\2\2\2\u0131\u0132"+
		"\3\2\2\2\u0132\u0130\3\2\2\2\u0132\u0133\3\2\2\2\u0133\u0134\3\2\2\2\u0134"+
		"\u0135\b,\2\2\u0135X\3\2\2\2\u0136\u0138\7\17\2\2\u0137\u0136\3\2\2\2"+
		"\u0137\u0138\3\2\2\2\u0138\u0139\3\2\2\2\u0139\u013a\7\f\2\2\u013aZ\3"+
		"\2\2\2\r\2dins\u0105\u010a\u0110\u0127\u0132\u0137\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}